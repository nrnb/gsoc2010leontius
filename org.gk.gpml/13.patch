---------------------
PatchSet 13 
Date: 2010/06/28 22:43:47
Author: leon
Branch: HEAD
Tag: (none) 
Log:
Added word wrap.

Members: 
	ReactomeToGPMLConverter.java:1.11->1.12 

Index: GKB/java/authorTool/src/org/gk/gpml/ReactomeToGPMLConverter.java
diff -u GKB/java/authorTool/src/org/gk/gpml/ReactomeToGPMLConverter.java:1.11 GKB/java/authorTool/src/org/gk/gpml/ReactomeToGPMLConverter.java:1.12
--- GKB/java/authorTool/src/org/gk/gpml/ReactomeToGPMLConverter.java:1.11	Mon Jun 28 09:29:21 2010
+++ GKB/java/authorTool/src/org/gk/gpml/ReactomeToGPMLConverter.java	Mon Jun 28 10:43:47 2010
@@ -8,11 +8,17 @@
 import java.awt.Dimension;
 import java.awt.Font;
 import java.awt.Graphics;
+import java.awt.Graphics2D;
 import java.awt.Point;
 import java.awt.Rectangle;
+import java.awt.font.FontRenderContext;
+import java.awt.font.LineBreakMeasurer;
+import java.awt.font.TextLayout;
 import java.awt.image.BufferedImage;
 import java.io.File;
 import java.io.FileOutputStream;
+import java.text.AttributedCharacterIterator;
+import java.text.AttributedString;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.HashMap;
@@ -141,6 +147,7 @@
                                                inst,
                                                true);
                             addCosmetics(dataNode, inst);
+                            wrapLabels(dataNode, ((Graphics2D)g).getFontRenderContext());
                         }
                     }
                 }
@@ -977,9 +984,6 @@
         return Integer.toHexString(c.getRGB() & 0x00ffffff);
     }
     
-    String wrapLines(String s, int width, Font font, String lineBreak) {
-        return "";
-    }
     
     private void addCosmetics(Element dataNode, GKInstance inst) {
         String type = dataNode.getAttributeValue("Type");
@@ -992,6 +996,32 @@
             graphics.setAttribute(GPMLConstants.LineThickness, "2");
         }
     }
+
+    private String wrapLines(String s, float wrappingWidth, FontRenderContext frc, String lineBreak) {
+        AttributedCharacterIterator aci = new AttributedString(s).getIterator();
+        int end = aci.getEndIndex();
+        LineBreakMeasurer measurer = new LineBreakMeasurer(aci, frc);
+        StringBuffer output = new StringBuffer();
+        int position = 0;
+        int lastPosition = 0;
+        do {
+            measurer.nextLayout(wrappingWidth);
+            position = measurer.getPosition();
+            output.append(s, lastPosition, position);
+            output.append(lineBreak);
+            lastPosition = position;
+        } while (position < end);
+        return output.toString();
+    }
+    
+    private void wrapLabels(Element dataNode, FontRenderContext frc) {
+        String label = dataNode.getAttributeValue("TextLabel");
+        Float width = new Float(getGraphicsChild(dataNode).getAttributeValue("Width"));
+        System.out.println(label);
+        // XML serialisation automatically converts "\n" to "&#xA;"
+        String wrappedLabel = wrapLines(label, width, frc, "\n");
+        dataNode.setAttribute("TextLabel", wrappedLabel);
+    }
     
     @Test
     public void testConvert() throws Exception {
